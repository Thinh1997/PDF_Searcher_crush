// This file is autogenerated: please see the codegen template "Options"
#ifndef PDFTRON_H_CPPPDFOfficeLocaleOverrides
#define PDFTRON_H_CPPPDFOfficeLocaleOverrides

#include <PDF/OptionsBase.h>

namespace pdftron{ namespace PDF{ 

class OfficeLocaleOverrides
{
public:
	OfficeLocaleOverrides();
	~OfficeLocaleOverrides();

	
	/**
	* Gets the value AccountingFormat1 from the options object
	* Accounting currency format rounded to integer, with negative values in parenthesis and no currency symbol. Value for the default locale: '#,##0_);(#,##0)'
	* @return a const UString&, the current value for AccountingFormat1.
	*/
	const UString& GetAccountingFormat1();

	/**
	* Sets the value for AccountingFormat1 in the options object
	* Accounting currency format rounded to integer, with negative values in parenthesis and no currency symbol. Value for the default locale: '#,##0_);(#,##0)'
	* @param value: the new value for AccountingFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat1(const UString& value);

	
	/**
	* Gets the value AccountingFormat2 from the options object
	* Accounting currency format rounded to integer, with red nagative values in parenthesis and no currency symbol. Value for the default locale: '#,##0_);[Red](#,##0)'
	* @return a const UString&, the current value for AccountingFormat2.
	*/
	const UString& GetAccountingFormat2();

	/**
	* Sets the value for AccountingFormat2 in the options object
	* Accounting currency format rounded to integer, with red nagative values in parenthesis and no currency symbol. Value for the default locale: '#,##0_);[Red](#,##0)'
	* @param value: the new value for AccountingFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat2(const UString& value);

	
	/**
	* Gets the value AccountingFormat3 from the options object
	* Accounting currency format with 2 digits after decimal point, negative values in parenthesis and no currency symbol. Value for the default locale: '#,##0.00_);(#,##0.00)'
	* @return a const UString&, the current value for AccountingFormat3.
	*/
	const UString& GetAccountingFormat3();

	/**
	* Sets the value for AccountingFormat3 in the options object
	* Accounting currency format with 2 digits after decimal point, negative values in parenthesis and no currency symbol. Value for the default locale: '#,##0.00_);(#,##0.00)'
	* @param value: the new value for AccountingFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat3(const UString& value);

	
	/**
	* Gets the value AccountingFormat4 from the options object
	* Accounting currency format with 2 digits after decimal point, red nagative values in parenthesis and no currency symbol. Value for the default locale: '#,##0.00_);[Red](#,##0.00)'
	* @return a const UString&, the current value for AccountingFormat4.
	*/
	const UString& GetAccountingFormat4();

	/**
	* Sets the value for AccountingFormat4 in the options object
	* Accounting currency format with 2 digits after decimal point, red nagative values in parenthesis and no currency symbol. Value for the default locale: '#,##0.00_);[Red](#,##0.00)'
	* @param value: the new value for AccountingFormat4
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat4(const UString& value);

	
	/**
	* Gets the value AccountingFormat5 from the options object
	* Accounting currency format rounded to integer, without currency symbol. Value for the default locale: '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)'
	* @return a const UString&, the current value for AccountingFormat5.
	*/
	const UString& GetAccountingFormat5();

	/**
	* Sets the value for AccountingFormat5 in the options object
	* Accounting currency format rounded to integer, without currency symbol. Value for the default locale: '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)'
	* @param value: the new value for AccountingFormat5
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat5(const UString& value);

	
	/**
	* Gets the value AccountingFormat6 from the options object
	* Accounting currency format rounded to integer, with local currency symbol. Value for the default locale: '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)'
	* @return a const UString&, the current value for AccountingFormat6.
	*/
	const UString& GetAccountingFormat6();

	/**
	* Sets the value for AccountingFormat6 in the options object
	* Accounting currency format rounded to integer, with local currency symbol. Value for the default locale: '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)'
	* @param value: the new value for AccountingFormat6
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat6(const UString& value);

	
	/**
	* Gets the value AccountingFormat7 from the options object
	* Accounting currency format with 2 digits after decimal point and no currency symbol. Value for the default locale: '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)'
	* @return a const UString&, the current value for AccountingFormat7.
	*/
	const UString& GetAccountingFormat7();

	/**
	* Sets the value for AccountingFormat7 in the options object
	* Accounting currency format with 2 digits after decimal point and no currency symbol. Value for the default locale: '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)'
	* @param value: the new value for AccountingFormat7
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat7(const UString& value);

	
	/**
	* Gets the value AccountingFormat8 from the options object
	* Accounting currency format with 2 digits after decimal point and local currency symbol. Value for the default locale: '_($* #,##0.00_)_($* (#,##0.00)_($* "-"??_)_(@_)'
	* @return a const UString&, the current value for AccountingFormat8.
	*/
	const UString& GetAccountingFormat8();

	/**
	* Sets the value for AccountingFormat8 in the options object
	* Accounting currency format with 2 digits after decimal point and local currency symbol. Value for the default locale: '_($* #,##0.00_)_($* (#,##0.00)_($* "-"??_)_(@_)'
	* @param value: the new value for AccountingFormat8
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetAccountingFormat8(const UString& value);

	
	/**
	* Gets the value CurrencyFormat1 from the options object
	* Format of a value in local currency rounded to integer, with thousands separator. Value for the default locale: '$#,##0_);($#,##0)'
	* @return a const UString&, the current value for CurrencyFormat1.
	*/
	const UString& GetCurrencyFormat1();

	/**
	* Sets the value for CurrencyFormat1 in the options object
	* Format of a value in local currency rounded to integer, with thousands separator. Value for the default locale: '$#,##0_);($#,##0)'
	* @param value: the new value for CurrencyFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetCurrencyFormat1(const UString& value);

	
	/**
	* Gets the value CurrencyFormat2 from the options object
	* Format of a value in local currency rounded to integer, with thousands separator and red nagative value. Value for the default locale: '$#,##0_);[Red]($#,##0)'
	* @return a const UString&, the current value for CurrencyFormat2.
	*/
	const UString& GetCurrencyFormat2();

	/**
	* Sets the value for CurrencyFormat2 in the options object
	* Format of a value in local currency rounded to integer, with thousands separator and red nagative value. Value for the default locale: '$#,##0_);[Red]($#,##0)'
	* @param value: the new value for CurrencyFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetCurrencyFormat2(const UString& value);

	
	/**
	* Gets the value CurrencyFormat3 from the options object
	* Format of a value in local currency, with thousands separator and 2 digits after decimal point. Value for the default locale: '$#,##0.00_);($#,##0.00)'
	* @return a const UString&, the current value for CurrencyFormat3.
	*/
	const UString& GetCurrencyFormat3();

	/**
	* Sets the value for CurrencyFormat3 in the options object
	* Format of a value in local currency, with thousands separator and 2 digits after decimal point. Value for the default locale: '$#,##0.00_);($#,##0.00)'
	* @param value: the new value for CurrencyFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetCurrencyFormat3(const UString& value);

	
	/**
	* Gets the value CurrencyFormat4 from the options object
	* Format of a value in local currency, with thousands separator, 2 digits after decimal point and red nagative value. Value for the default locale: '$#,##0.00_);[Red]($#,##0.00)'
	* @return a const UString&, the current value for CurrencyFormat4.
	*/
	const UString& GetCurrencyFormat4();

	/**
	* Sets the value for CurrencyFormat4 in the options object
	* Format of a value in local currency, with thousands separator, 2 digits after decimal point and red nagative value. Value for the default locale: '$#,##0.00_);[Red]($#,##0.00)'
	* @param value: the new value for CurrencyFormat4
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetCurrencyFormat4(const UString& value);

	
	/**
	* Gets the value DateFormat1 from the options object
	* Short date format. Value for the default locale: 'mm-dd-yy'
	* @return a const UString&, the current value for DateFormat1.
	*/
	const UString& GetDateFormat1();

	/**
	* Sets the value for DateFormat1 in the options object
	* Short date format. Value for the default locale: 'mm-dd-yy'
	* @param value: the new value for DateFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetDateFormat1(const UString& value);

	
	/**
	* Gets the value DateFormat2 from the options object
	* Date format with a short month name. Value for the default locale: 'd-mmm-yy'
	* @return a const UString&, the current value for DateFormat2.
	*/
	const UString& GetDateFormat2();

	/**
	* Sets the value for DateFormat2 in the options object
	* Date format with a short month name. Value for the default locale: 'd-mmm-yy'
	* @param value: the new value for DateFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetDateFormat2(const UString& value);

	
	/**
	* Gets the value DateFormat3 from the options object
	* Date format with a short month name and no year. Value for the default locale: 'd-mmm'
	* @return a const UString&, the current value for DateFormat3.
	*/
	const UString& GetDateFormat3();

	/**
	* Sets the value for DateFormat3 in the options object
	* Date format with a short month name and no year. Value for the default locale: 'd-mmm'
	* @param value: the new value for DateFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetDateFormat3(const UString& value);

	
	/**
	* Gets the value DateFormat4 from the options object
	* Date format with a short month name and no day. Value for the default locale: 'mmm-yy'
	* @return a const UString&, the current value for DateFormat4.
	*/
	const UString& GetDateFormat4();

	/**
	* Sets the value for DateFormat4 in the options object
	* Date format with a short month name and no day. Value for the default locale: 'mmm-yy'
	* @param value: the new value for DateFormat4
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetDateFormat4(const UString& value);

	
	/**
	* Gets the value DatetTimeFormat from the options object
	* Short date with 24-hour time format. Value for the default locale: 'm/d/yy h:mm'
	* @return a const UString&, the current value for DatetTimeFormat.
	*/
	const UString& GetDatetTimeFormat();

	/**
	* Sets the value for DatetTimeFormat in the options object
	* Short date with 24-hour time format. Value for the default locale: 'm/d/yy h:mm'
	* @param value: the new value for DatetTimeFormat
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetDatetTimeFormat(const UString& value);

	
	/**
	* Gets the value FixedNumberFormat1 from the options object
	* Format of a fixed number rounded to integer. Value for the default locale: '0'
	* @return a const UString&, the current value for FixedNumberFormat1.
	*/
	const UString& GetFixedNumberFormat1();

	/**
	* Sets the value for FixedNumberFormat1 in the options object
	* Format of a fixed number rounded to integer. Value for the default locale: '0'
	* @param value: the new value for FixedNumberFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFixedNumberFormat1(const UString& value);

	
	/**
	* Gets the value FixedNumberFormat2 from the options object
	* Format of a fixed number with 2 digits after decimal point. Value for the default locale: '0.00'
	* @return a const UString&, the current value for FixedNumberFormat2.
	*/
	const UString& GetFixedNumberFormat2();

	/**
	* Sets the value for FixedNumberFormat2 in the options object
	* Format of a fixed number with 2 digits after decimal point. Value for the default locale: '0.00'
	* @param value: the new value for FixedNumberFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFixedNumberFormat2(const UString& value);

	
	/**
	* Gets the value FixedNumberFormat3 from the options object
	* Format of a fixed number rounded to integer, with thousands separator. Value for the default locale: '#,##0'
	* @return a const UString&, the current value for FixedNumberFormat3.
	*/
	const UString& GetFixedNumberFormat3();

	/**
	* Sets the value for FixedNumberFormat3 in the options object
	* Format of a fixed number rounded to integer, with thousands separator. Value for the default locale: '#,##0'
	* @param value: the new value for FixedNumberFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFixedNumberFormat3(const UString& value);

	
	/**
	* Gets the value FixedNumberFormat4 from the options object
	* Format of a fixed number with thousands separator and 2 digits after decimal point. Value for the default locale: '#,##0.00'
	* @return a const UString&, the current value for FixedNumberFormat4.
	*/
	const UString& GetFixedNumberFormat4();

	/**
	* Sets the value for FixedNumberFormat4 in the options object
	* Format of a fixed number with thousands separator and 2 digits after decimal point. Value for the default locale: '#,##0.00'
	* @param value: the new value for FixedNumberFormat4
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFixedNumberFormat4(const UString& value);

	
	/**
	* Gets the value FractionNumberFormat1 from the options object
	* Fraction number format with a single-digit fraction. Value for the default locale: '# ?/?'
	* @return a const UString&, the current value for FractionNumberFormat1.
	*/
	const UString& GetFractionNumberFormat1();

	/**
	* Sets the value for FractionNumberFormat1 in the options object
	* Fraction number format with a single-digit fraction. Value for the default locale: '# ?/?'
	* @param value: the new value for FractionNumberFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFractionNumberFormat1(const UString& value);

	
	/**
	* Gets the value FractionNumberFormat2 from the options object
	* Fraction number format with a double-digit fraction. Value for the default locale: '# ??/??'
	* @return a const UString&, the current value for FractionNumberFormat2.
	*/
	const UString& GetFractionNumberFormat2();

	/**
	* Sets the value for FractionNumberFormat2 in the options object
	* Fraction number format with a double-digit fraction. Value for the default locale: '# ??/??'
	* @param value: the new value for FractionNumberFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetFractionNumberFormat2(const UString& value);

	
	/**
	* Gets the value PercentageFormat1 from the options object
	* Format of a percentage value rounded to integer. Value for the default locale: '0%'
	* @return a const UString&, the current value for PercentageFormat1.
	*/
	const UString& GetPercentageFormat1();

	/**
	* Sets the value for PercentageFormat1 in the options object
	* Format of a percentage value rounded to integer. Value for the default locale: '0%'
	* @param value: the new value for PercentageFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetPercentageFormat1(const UString& value);

	
	/**
	* Gets the value PercentageFormat2 from the options object
	* Format of a percentage value with 2 digits after decimal point. Value for the default locale: '0.00%'
	* @return a const UString&, the current value for PercentageFormat2.
	*/
	const UString& GetPercentageFormat2();

	/**
	* Sets the value for PercentageFormat2 in the options object
	* Format of a percentage value with 2 digits after decimal point. Value for the default locale: '0.00%'
	* @param value: the new value for PercentageFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetPercentageFormat2(const UString& value);

	
	/**
	* Gets the value ScientificNumberFormat1 from the options object
	* Scientific number format with two digits after decimal point and at least two digits in the exponent. Value for the default locale: '0.00E+00'
	* @return a const UString&, the current value for ScientificNumberFormat1.
	*/
	const UString& GetScientificNumberFormat1();

	/**
	* Sets the value for ScientificNumberFormat1 in the options object
	* Scientific number format with two digits after decimal point and at least two digits in the exponent. Value for the default locale: '0.00E+00'
	* @param value: the new value for ScientificNumberFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetScientificNumberFormat1(const UString& value);

	
	/**
	* Gets the value ScientificNumberFormat2 from the options object
	* Scientific number format with up to 3 significant digits before decimal point and one digit after it. Value for the default locale: '##0.0E+0'
	* @return a const UString&, the current value for ScientificNumberFormat2.
	*/
	const UString& GetScientificNumberFormat2();

	/**
	* Sets the value for ScientificNumberFormat2 in the options object
	* Scientific number format with up to 3 significant digits before decimal point and one digit after it. Value for the default locale: '##0.0E+0'
	* @param value: the new value for ScientificNumberFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetScientificNumberFormat2(const UString& value);

	
	/**
	* Gets the value TextFormat from the options object
	* Text format used to treat numbers as text, when necessary. Value for the default locale: '@'
	* @return a const UString&, the current value for TextFormat.
	*/
	const UString& GetTextFormat();

	/**
	* Sets the value for TextFormat in the options object
	* Text format used to treat numbers as text, when necessary. Value for the default locale: '@'
	* @param value: the new value for TextFormat
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTextFormat(const UString& value);

	
	/**
	* Gets the value TimeFormat1 from the options object
	* Time format with AM/PM indicator and no seconds. Value for the default locale: 'h:mm AM/PM'
	* @return a const UString&, the current value for TimeFormat1.
	*/
	const UString& GetTimeFormat1();

	/**
	* Sets the value for TimeFormat1 in the options object
	* Time format with AM/PM indicator and no seconds. Value for the default locale: 'h:mm AM/PM'
	* @param value: the new value for TimeFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeFormat1(const UString& value);

	
	/**
	* Gets the value TimeFormat2 from the options object
	* Time format with AM/PM indicator. Value for the default locale: 'h:mm AM/PM'
	* @return a const UString&, the current value for TimeFormat2.
	*/
	const UString& GetTimeFormat2();

	/**
	* Sets the value for TimeFormat2 in the options object
	* Time format with AM/PM indicator. Value for the default locale: 'h:mm AM/PM'
	* @param value: the new value for TimeFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeFormat2(const UString& value);

	
	/**
	* Gets the value TimeFormat3 from the options object
	* 24-hour time format without seconds. Value for the default locale: 'h:mm'
	* @return a const UString&, the current value for TimeFormat3.
	*/
	const UString& GetTimeFormat3();

	/**
	* Sets the value for TimeFormat3 in the options object
	* 24-hour time format without seconds. Value for the default locale: 'h:mm'
	* @param value: the new value for TimeFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeFormat3(const UString& value);

	
	/**
	* Gets the value TimeFormat4 from the options object
	* 24-hour time format. Value for the default locale: 'h:mm:s'
	* @return a const UString&, the current value for TimeFormat4.
	*/
	const UString& GetTimeFormat4();

	/**
	* Sets the value for TimeFormat4 in the options object
	* 24-hour time format. Value for the default locale: 'h:mm:s'
	* @param value: the new value for TimeFormat4
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeFormat4(const UString& value);

	
	/**
	* Gets the value TimeSpanFormat1 from the options object
	* Format of a time span without hours. Value for the default locale: 'mm:ss'
	* @return a const UString&, the current value for TimeSpanFormat1.
	*/
	const UString& GetTimeSpanFormat1();

	/**
	* Sets the value for TimeSpanFormat1 in the options object
	* Format of a time span without hours. Value for the default locale: 'mm:ss'
	* @param value: the new value for TimeSpanFormat1
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeSpanFormat1(const UString& value);

	
	/**
	* Gets the value TimeSpanFormat2 from the options object
	* Format of a time span with hours. Value for the default locale: '[h]:mm:ss'
	* @return a const UString&, the current value for TimeSpanFormat2.
	*/
	const UString& GetTimeSpanFormat2();

	/**
	* Sets the value for TimeSpanFormat2 in the options object
	* Format of a time span with hours. Value for the default locale: '[h]:mm:ss'
	* @param value: the new value for TimeSpanFormat2
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeSpanFormat2(const UString& value);

	
	/**
	* Gets the value TimeSpanFormat3 from the options object
	* Format of a time span without hours and delimiters and with one decimal digit after point. Value for the default locale: 'mmss.0'
	* @return a const UString&, the current value for TimeSpanFormat3.
	*/
	const UString& GetTimeSpanFormat3();

	/**
	* Sets the value for TimeSpanFormat3 in the options object
	* Format of a time span without hours and delimiters and with one decimal digit after point. Value for the default locale: 'mmss.0'
	* @param value: the new value for TimeSpanFormat3
	* @return this object, for call chaining
	*/
	OfficeLocaleOverrides& SetTimeSpanFormat3(const UString& value);

	
	// @cond PRIVATE_DOC
	#ifndef SWIGHIDDEN
	SDF::Obj& GetInternalObj();

private:
	
	SDF::ObjSet m_obj_set;
	SDF::Obj m_dict;
	#endif
	// @endcond
};

}
}

#include "../Impl/OfficeLocaleOverrides.inl"
#endif // PDFTRON_H_CPPPDFOfficeLocaleOverrides
